services:
  backend:
    container_name: marketplace-backend
    build:
      context: ./backend
      dockerfile: Marketplace.Api/Dockerfile
    ports:
      - "8000:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      - db
    env_file:
      - .env

  db:
    container_name: marketplace-db
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - db_data:/var/lib/postgresql/data
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  pgadmin:
    container_name: marketplace-pgadmin
    image: dpage/pgadmin4:latest
    ports:
      - "5050:80"
    depends_on:
      - db
    env_file:
      - .env

  redis:
    container_name: marketplace-redis
    image: redis:latest
    ports:
      - "6379:6379"
    env_file:
      - .env

  rabbitmq:
    container_name: marketplace-rabbitmq
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ__Username}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ__Password}
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  minio:
    container_name: marketplace-minio
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO__AccessKey}
      MINIO_ROOT_PASSWORD: ${MINIO__SecretKey}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    env_file:
      - .env

  delete_token_worker:
    container_name: delete-token-worker
    build:
      context: ./backend
      dockerfile: DeleteTokenWorker/Dockerfile
    depends_on:
      - db
    env_file:
      - .env

  delete_user_worker:
    container_name: delete-user-worker
    build:
      context: ./backend
      dockerfile: DeleteUserWorker/Dockerfile
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env

  delete_product_worker:
    container_name: delete-product-worker
    build:
      context: ./backend
      dockerfile: DeleteProductWorker/Dockerfile
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env

  delete_media_worker:
    container_name: delete-media-worker
    build:
      context: ./backend
      dockerfile: DeleteMediaWorker/Dockerfile
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env

volumes:
  db_data:
  minio_data: